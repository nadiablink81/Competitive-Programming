import java.io.*;
import java.util.*;

class milk3 {

    static int A, B, C;
    static int a, b, c;
    static HashSet<String> set;

    public static void main(String[] args) throws IOException {
        BufferedReader f = new BufferedReader(new FileReader("milk3.in"));     
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("milk3.out")));

        StringTokenizer st = new StringTokenizer(f.readLine());
        A = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        // System.out.println(A + " " + B + " " + C);

        a = 0;
        b = 0;
        c = C;
        // System.out.println(a + " " + b + " " + c);
        set = new HashSet<>();
        dfs(a, b, c);
        // System.out.println(set);
        ArrayList<Integer> list = new ArrayList<>();
        for (String v : set) {
            st = new StringTokenizer(v);
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            int z = Integer.parseInt(st.nextToken());
            if (x == 0) list.add(z);
        }
        Collections.sort(list);
        // System.out.println(list);

        System.out.print(list.get(0));
        out.print(list.get(0));
        for (int i = 1; i < list.size(); i++) {
            System.out.print(" " + list.get(i));
            out.print(" " + list.get(i));
        }
        System.out.println();
        out.println();
        out.close();
    }

    static void dfs(int a, int b, int c) {
        String s = a + " " + b + " " + c;
        if (set.contains(s)) return;
        set.add(s);
        // a to b
        int give = Math.min(a, B-b);
        // System.out.println(give);
        if (give != 0) dfs(a-give, b+give, c);
        //a to c
        give = Math.min(a, C-c);
        if (give != 0) dfs(a-give, b, c+give);
        // b to a
        give = Math.min(b, A-a);
        if (give != 0) dfs(a+give, b-give, c);
        // b to c
        give = Math.min(b, C-c);
        if (give != 0) dfs(a, b-give, c+give);
        //c to a
        give = Math.min(c, A-a);
        if (give != 0) dfs(a+give, b, c-give);
        //c to b
        give = Math.min(c, B-b);
        if (give != 0) dfs(a, b+give, c-give);
    }
}
